<!------------------------------------------------------------------------------
    Copyright 2021 RHEA System S.A.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
------------------------------------------------------------------------------->

@page "/reqif/{ReqIF}/specobject/{SpecObject}"

@using ReqIFSharp
@using ReqifViewer.Infrastructure.ReqIFExtensions
@using ReqifViewer.Infrastructure.Services
@using reqifviewer.Components

@inject IReqIFLoaderService reqIfLoaderService

@if (isLoading)
{
    <RadzenHeading Size="H1" style="display: inline-block" Text="Loading SpecObject"></RadzenHeading>

    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
}
else
{
    <RadzenCard Style="margin-bottom: 20px">
        <ChildContent>
            @(new MarkupString(this.specObject?.ExtractDisplayName().ToString()))
        </ChildContent>
    </RadzenCard>

    <div class="row">
        <div class="col-md-12 col-lg-12 col-xl-12">
            <RadzenCard Style="margin-bottom: 20px">
                <RadzenHeading Text="SpecObject Attributes" Size="H6"></RadzenHeading>

                <AttributeValuesComponent AttributeValues="this.specObject?.Values" />
            </RadzenCard>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6 col-lg-6 col-xl-6">
            <RadzenCard Style="margin-bottom: 20px">
                <RadzenHeading Text="Specifications" Size="H6"></RadzenHeading>

                <SpecificationsComponent Specifications="this.specifications" />
            </RadzenCard>
        </div>
        <div class="col-md-6 col-lg-6 col-xl-6">
            <RadzenCard Style="margin-bottom: 20px">
                <RadzenHeading Text="Relationships" Size="H6"></RadzenHeading>

                <RadzenDataGrid PageSize="10" AllowPaging="true" AllowSorting="true" AllowFiltering="true" Data="@this.specRelations" TItem="SpecRelation">
                    <Columns>
                        <RadzenDataGridColumn TItem="SpecRelation" Title="Source">
                            <Template Context="specRelation">
                                @if (@specRelation.Source == this.specObject)
                                {
                                    @specRelation.Source.ExtractDisplayName()
                                }
                                else
                                {
                                    <a href="reqif/@ReqIF/specobject/@specRelation.Source?.Identifier"> @(new MarkupString(specRelation.Source.ExtractDisplayName().ToString()))</a>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="SpecRelation" Title="Spec Relation">
                            <Template Context="specRelation">
                                <a href="reqif/@ReqIF/specrelation/@specRelation.Identifier">@(new MarkupString(specRelation.ExtractDisplayName().ToString()))</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="SpecRelation" Title="Target">
                            <Template Context="specRelation">
                                @if (@specRelation.Target == this.specObject)
                                {
                                    @specRelation.Target.ExtractDisplayName()
                                }
                                else
                                {
                                <a href="reqif/@ReqIF/specobject/@specRelation.Target?.Identifier">@(new MarkupString(specRelation.Target.ExtractDisplayName().ToString()))</a>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenCard>
        </div>
    </div>
}

@code {

    /// <summary>
    /// Gets or sets the unique identifier of the <see cref="ReqIF.TheHeader"/>
    /// </summary>
    [Parameter]
    public string ReqIF { get; set; }

    /// <summary>
    /// Gets or sets the unique identifier of the <see cref="SpecObject"/>
    /// </summary>
    [Parameter]
    public string SpecObject { get; set; }

    /// <summary>
    /// The <see cref="SpecObject"/> object that is loaded on the page
    /// </summary>
    private SpecObject specObject;

    /// <summary>
    /// The <see cref="Specification"/> that the <see cref="SpecObject"/> is contained by
    /// </summary>
    private IEnumerable<Specification> specifications;

    /// <summary>
    /// The <see cref="SpecRelation"/> that the <see cref="SpecObject"/> is either the source or target of
    /// </summary>
    private IEnumerable<SpecRelation> specRelations;

    /// <summary>
    /// a value indicating whether the page is loading or not
    /// </summary>
    private bool isLoading = true;

    /// <summary>
    /// Asynchronous Component initialization
    /// </summary>
    /// <returns>
    /// an awaitable <see cref="Task" />
    /// </returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        //isLoading = false;

        //this.LoadData();
    }

    protected override void OnParametersSet()
    {
        isLoading = false;

        this.LoadData();
    }

    /// <summary>
    /// Load the data into view-models
    /// </summary>
    protected void LoadData()
    {
        try
        {
            isLoading = true;

            var reqIf = this.reqIfLoaderService.ReqIFData.SingleOrDefault(x => x.TheHeader.Identifier == this.ReqIF);

            this.specObject = reqIf.CoreContent.SpecObjects.SingleOrDefault(x => x.Identifier == SpecObject);

            this.specifications = this.specObject.QueryContainerSpecifications();

            this.specRelations = this.specObject.QuerySpecRelations();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
